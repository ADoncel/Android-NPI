/*
 *  Copyright (C) 2014, 2015 - Antonio Doncel Campos <adoncel@correo.ugr.es>, Hugo Mario Lupión Fernández <hugolupionfernandez@correo.ugr.es>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.meatio.androidmetaio;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.hardware.Camera.CameraInfo;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.view.MenuItem;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.RotateAnimation;
import android.widget.ImageButton;
import android.widget.ImageView;

public class Brujula extends Activity implements SensorEventListener {


	private float orientacionActual = 0.0f;
	private float orientacionAnterior = 0.0f;
	private ImageView aguja;
	private SensorManager brujula;
	private PuntoCardinal objetivo;
	private ComprobarDireccion comparador;
	private boolean enBusqueda;
	private boolean botonPulsado;
	private static final int GUARDAR_FOTO = 1;
	private boolean[] direcciones_activadas;
	
	ImageButton N_Button;
	ImageButton NE_Button;
	ImageButton E_Button;
	ImageButton SE_Button;
	ImageButton S_Button;
	ImageButton SO_Button;
	ImageButton O_Button;
	ImageButton NO_Button;

	/**
     * Creación de la actividad e inicialización de componentes
     * @param savedInstanceState
     */
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_brujula);

		this.aguja = (ImageView) findViewById(R.id.Aguja);
		this.enBusqueda = false;
		this.botonPulsado = false;

		direcciones_activadas = new boolean[8];

		for (int i = 0; i < 8; i++)
			direcciones_activadas[i] = false;

		this.N_Button = (ImageButton) findViewById(R.id.N_Button);
		this.NE_Button = (ImageButton) findViewById(R.id.NE_Button);
		this.E_Button = (ImageButton) findViewById(R.id.E_Button);
		this.SE_Button = (ImageButton) findViewById(R.id.SE_Button);
		this.S_Button = (ImageButton) findViewById(R.id.S_Button);
		this.SO_Button = (ImageButton) findViewById(R.id.SO_Button);
		this.O_Button = (ImageButton) findViewById(R.id.O_Button);
		this.NO_Button = (ImageButton) findViewById(R.id.NO_Button);

		this.comparador = new ComprobarDireccion();
		this.comparador.setTolerancia(0.05f);

		this.brujula = (SensorManager) getSystemService(SENSOR_SERVICE);
	}

	/**
	 * Acción al pulsar N: Selecciona el Norte como objetivo
	 * @param v
	 */
	public void onClickN_Button(View v) {
		if (!this.enBusqueda)
			this.enBusqueda = true;
		
		this.objetivo = PuntoCardinal.Norte;
		this.comparador.setDireccion(this.objetivo);
		
		this.N_Button.setImageResource(R.drawable.n_pushed);

		if (!this.direcciones_activadas[0]) {
			for (int i = 1; i < 8; i++) {
				if (this.direcciones_activadas[i]) {
					this.direcciones_activadas[i] = false;
					
					restablecerIcono(i);
				}
			}
			
			this.direcciones_activadas[0] = true;
		}

	}
	
	/**
	 * Acción al pulsar NE: Selecciona el Noreste como objetivo
	 * @param v
	 */
	public void onClickNE_Button(View v) {
		if (!this.enBusqueda)
			this.enBusqueda = true;

		this.objetivo = PuntoCardinal.Noreste;
		this.comparador.setDireccion(this.objetivo);
		
		this.NE_Button.setImageResource(R.drawable.ne_pushed);

		
		if (!this.direcciones_activadas[1]) {
			for (int i = 0; i < 8; i++) {
				if (this.direcciones_activadas[i]) {
					this.direcciones_activadas[i] = false;
					if(i != 1)
						restablecerIcono(i);
				}

				this.direcciones_activadas[1] = true;
			}
		}

	}
	
	/**
	 * Acción al pulsar E: Selecciona el Este como objetivo
	 * @param v
	 */
	public void onClickE_Button(View v) {
		if (!this.enBusqueda)
			this.enBusqueda = true;

		this.objetivo = PuntoCardinal.Este;
		this.comparador.setDireccion(this.objetivo);
		
		this.E_Button.setImageResource(R.drawable.e_pushed);

		
		if (!this.direcciones_activadas[2]) {
			for (int i = 0; i < 8; i++) {
				if (this.direcciones_activadas[i]) {
					this.direcciones_activadas[i] = false;
					if(i != 2)
						restablecerIcono(i);
				}

				this.direcciones_activadas[2] = true;
			}
		}

	}
	
	/**
	 * Acción al pulsar SE: Selecciona el Sudeste como objetivo
	 * @param v
	 */
	public void onClickSE_Button(View v) {
		if (!this.enBusqueda)
			this.enBusqueda = true;

		this.objetivo = PuntoCardinal.Sudeste;
		this.comparador.setDireccion(this.objetivo);
		
		this.SE_Button.setImageResource(R.drawable.se_pushed);

		
		if (!this.direcciones_activadas[3]) {
			for (int i = 0; i < 8; i++) {
				if (this.direcciones_activadas[i]) {
					this.direcciones_activadas[i] = false;
					if(i != 3)
						restablecerIcono(i);
				}

				this.direcciones_activadas[3] = true;
			}
		}

	}
	
	/**
	 * Acción al pulsar N: Selecciona el Norte como objetivo
	 * @param v
	 */
	public void onClickS_Button(View v) {
		if (!this.enBusqueda)
			this.enBusqueda = true;

		this.objetivo = PuntoCardinal.Sur;
		this.comparador.setDireccion(this.objetivo);
		
		this.S_Button.setImageResource(R.drawable.s_pushed);

		
		if (!this.direcciones_activadas[4]) {
			for (int i = 0; i < 8; i++) {
				if (this.direcciones_activadas[i]) {
					this.direcciones_activadas[i] = false;
					if(i != 4)
						restablecerIcono(i);
				}

				this.direcciones_activadas[4] = true;
			}
		}

	}
	
	/**
	 * Acción al pulsar N: Selecciona el Norte como objetivo
	 * @param v
	 */
	public void onClickSO_Button(View v) {
		if (!this.enBusqueda)
			this.enBusqueda = true;

		this.objetivo = PuntoCardinal.Suroeste;
		this.comparador.setDireccion(this.objetivo);
		
		this.SO_Button.setImageResource(R.drawable.so_pushed);

		
		if (!this.direcciones_activadas[5]) {
			for (int i = 0; i < 8; i++) {
				if (this.direcciones_activadas[i]) {
					this.direcciones_activadas[i] = false;
					if(i != 5)
						restablecerIcono(i);
				}

				this.direcciones_activadas[5] = true;
			}
		}

	}
	
	/**
	 * Acción al pulsar N: Selecciona el Norte como objetivo
	 * @param v
	 */
	public void onClickO_Button(View v) {
		if (!this.enBusqueda)
			this.enBusqueda = true;

		this.objetivo = PuntoCardinal.Oeste;
		this.comparador.setDireccion(this.objetivo);
		
		this.O_Button.setImageResource(R.drawable.o_pushed);

		
		if (!this.direcciones_activadas[6]) {
			for (int i = 0; i < 8; i++) {
				if (this.direcciones_activadas[i]) {
					this.direcciones_activadas[i] = false;
					if(i != 6)
						restablecerIcono(i);
				}

				this.direcciones_activadas[6] = true;
			}
		}

	}
	
	/**
	 * Acción al pulsar N: Selecciona el Norte como objetivo
	 * @param v
	 */
	public void onClickNO_Button(View v) {
		if (!this.enBusqueda)
			this.enBusqueda = true;

		this.objetivo = PuntoCardinal.Noroeste;
		this.comparador.setDireccion(this.objetivo);
		
		this.NO_Button.setImageResource(R.drawable.no_pushed);

		
		if (!this.direcciones_activadas[7]) {
			for (int i = 0; i < 7; i++) {
				if (this.direcciones_activadas[i]) {
					this.direcciones_activadas[i] = false;
					
					restablecerIcono(i);
				}

				this.direcciones_activadas[7] = true;
			}
		}

	}
	
	// Este método restaura la imagen del icono sin pulsar.
	public void restablecerIcono(int valor){
		switch (valor) {
		case 0:
			this.N_Button.setImageResource(R.drawable.n);
			break;
			
		case 1:
			this.NE_Button.setImageResource(R.drawable.ne);
			break;
			
		case 2:
			this.E_Button.setImageResource(R.drawable.e);
			break;
			
		case 3:
			this.SE_Button.setImageResource(R.drawable.se);
			break;
			
		case 4:
			this.S_Button.setImageResource(R.drawable.s);
			break;
			
		case 5:
			this.SO_Button.setImageResource(R.drawable.so);
			break;
			
		case 6:
			this.O_Button.setImageResource(R.drawable.o);
			break;

		case 7:
			this.NO_Button.setImageResource(R.drawable.no);
			break;
		}
		
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	/**
	 * Método utilizado para activar el sensor cuando la aplicación continua su
	 * funcionamiento.
	 */

	@Override
	protected void onResume() {
		super.onResume();

		// Continue listening the orientation sensor
		this.brujula.registerListener(this,
				this.brujula.getDefaultSensor(Sensor.TYPE_ORIENTATION),
				SensorManager.SENSOR_DELAY_GAME);
	}

	/**
	 * Método utilizado para desactivar el sensor cuando la aplicación se
	 * detiene:
	 */
	@Override
	protected void onPause() {
		super.onPause();

		// Stop listening the sensor
		this.brujula.unregisterListener(this);
	}

	@Override
	public void onSensorChanged(SensorEvent event) {

		// Obtenemos el ángulo calculado por el sensor:
		this.orientacionActual = (float) event.values[0];

		// Comprobamos si tenemos objetivo:
		if (this.enBusqueda) {
			// En caso de que sí, comprobamos si estamos apuntando al objetivo:
			if (comparador.direccionCorrecta(this.objetivo, this.orientacionActual)) {
				
				// En caso correcto, lanzamos la cámara, mediante un intent:
				Intent camaraIntent = new Intent(
						android.provider.MediaStore.ACTION_IMAGE_CAPTURE);

				File photo = new File(Environment.getExternalStorageDirectory(), "captura.jpg");
				camaraIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(photo));
				startActivityForResult(camaraIntent, 0);
				
				this.enBusqueda = false;
			}
		}

		// Giramos la aguja de la brújula cuanto sea necesario. Para ello,
		// creamos
		// la siguiente animación:
		RotateAnimation rotation;
		rotation = new RotateAnimation(this.orientacionAnterior,
				this.orientacionActual, Animation.RELATIVE_TO_SELF, 0.5f,
				Animation.RELATIVE_TO_SELF, 0.5f);

		rotation.setDuration(300);
		rotation.setFillAfter(true);
		this.aguja.startAnimation(rotation);

		// Update current degree
		this.orientacionAnterior = this.orientacionActual;
	}

	@Override
	public void onAccuracyChanged(Sensor sensor, int accuracy) {

	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		
	}

}

